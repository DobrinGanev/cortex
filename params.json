{"name":"Cortex","tagline":"A javascript library for centrally managing data with React","body":"# Overview\r\n\r\nIn React's world data flows in one direction from the top down. That means if you want to make a change, change it at the source and let it propagate down the chain. But what happen when a child component wants to update the data? React's official guideline is to use callback for communication between parent and child components.\r\n\r\nHowever, this simply isn't sustainable even for trivially nested data. Imagine a Restaurant app in which the Restaurant has many Orders, each has many Items, each of which has many Modifiers. If you want to update a Modifier from 'medium rare' to 'well-done' you'd have to pass the data several levels up. This is not only awkward but also creates unnecessary extra code in each component in the chain only for the purpose of passing data upstream.\r\n\r\nCortex's goal is to support arbitrarily deep data without requiring you to pass callbacks down the chain while complying to React one-direction data flow. Cortex achieves this by thinly wrap your data in an object that contains the key for locating each nested piece of data as accessed from the top level. When you change the data, internally Cortex passes the new value along with its location key to update the data at the source.\r\n\r\n\r\n# Basic example\r\n\r\nLet's look at the following example for Order and Item components. An Order contains an array of Items, and each Item can increase its own quantity attribute.\r\n\r\n```javascript\r\nvar Item = React.createClass({\r\n  increase: function() {\r\n    var qty = this.props.item.get('qty').getValue();\r\n    this.props.item.get('qty').set(qty + 1);\r\n  },\r\n  subTotal: function() {\r\n    return this.props.item.get('qty').getValue() * this.props.item.get('price').getValue();\r\n  },\r\n  render: function() {\r\n    <div className=\"item\">\r\n      <a href=\"#\" onClick={this.increase}>+</a>\r\n      <span>{this.props.item.get('qty').getValue()}</span>\r\n      <span>{this.props.item.get('name').getValue()}</span>\r\n      <span>${this.subTotal()}</span>\r\n    </div>\r\n  }\r\n});\r\n\r\nvar Order = React.createClass({\r\n  render: function() {\r\n    var items = this.props.order.map(function(item){\r\n      return <Item item={item} />;\r\n    });\r\n    <div>\r\n      {items}\r\n    </div>\r\n  }\r\n});\r\n\r\nvar orderComponent,\r\n    orderData = [\r\n      {name: \"Burger\", qty: 2, price: 5.0},\r\n      {name: \"Salad\", qty: 1, price: 4.50},\r\n      {name: \"Coke\", qty: 3, price: 1.50}\r\n    ];\r\n\r\n//Initialize cortex with data and pass in a callback to run when data is updated.\r\nvar orderCortex = new Cortex(orderData, function(updatedOrder) {\r\n  orderComponent.setProps({order: orderCortex});\r\n});\r\n\r\norderComponent = React.renderComponent(\r\n  <Order order={orderCortex} />, document.getElementById(\"order\")\r\n);\r\n```\r\n\r\nIn the above example, we initialize cortex with:\r\n```javascript\r\nvar orderCortex = new Cortex(orderData, function(updatedOrder) {\r\n  orderComponent.setProps({order: orderCortex});\r\n});\r\n```\r\n\r\nThen it is passed into the Order component, which is then used to render the array of Item components.\r\n\r\nIn Item component, note that we display the values with ``this.props.item.get('qty').getValue()`` and ``this.props.item.get('name').getValue()``. This is because ``this.props.item.get('qty')`` only gives us the wrapper of the ``qty`` attribute, we need to call ``getValue()`` to get the actual value.\r\n\r\nIn the `increase()` method, we use ``this.props.item.get('qty').set(qty + 1)`` to add 1 to the current qty value.\r\n\r\n# Cortex API\r\n\r\n### Initialize:\r\n\r\n```javascript\r\nnew Cortex(data, function() {\r\n  //trigger your React component to update\r\n});\r\n```\r\n\r\n### Instance methods:\r\n\r\n    Method         | Description\r\n    ---------------|:-------------------\r\n    `get(key)`     | Returns the wrapper object for the provided key\r\n    `getValue()`   | Returns the actual value\r\n    `set(value)`   | Changes the value and rewrap the entire data tree\r\n\r\n### Cortex wrapper of enumerable data has the following methods:\r\n\r\n    Method                         | Description\r\n    -------------------------------|:----------------------\r\n    `getLength()`                  | Returns length of nested wrappers\r\n    `forEach(callback)`            | Iterates over all elements. The callback accepts the following input `(wrapperElement, index, wrapperArray)`\r\n    `map(callback)`                | Returns a new array as returned by the callback. Callback accepts same input as forEach callback\r\n    `find(callback)`               | Returns the first wrapper element that meets the condition returned by callback. Callback accepts same input as forEach callback.\r\n    `findIndex(callback)`          | Returns index of first wrapper element that meets condition returned callback. Callback accepts same input as forEach callback.\r\n    `push(value)`                  | Inserts and rewrap the value at the end of the array.\r\n    `pop()`                        | Removes the last element in the array\r\n    `insertAt(index, [value])`     | Inserts a value or an array of values starting at specified index.\r\n    `removeAt(index, howMany = 1)` | Removes specified number of elements starting at index location. By default it removes 1 element if number of elements to be removed isn't specified.\r\n\r\n\r\n# Buidling Cortex\r\nTo build Cortex:\r\n```console\r\ngulp\r\n```\r\n\r\nTo run test:\r\n```console\r\ngulp test\r\n```\r\n\r\nTo compile jsx files in examples into js files:\r\n```console\r\ngulp react\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}